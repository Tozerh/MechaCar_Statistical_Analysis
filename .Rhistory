x <- 3
x
x[2]
/x
x
x <- 100
list <- c(1,2,3,4,5,6,7,8,9)
list
list*2
list*2*2*2*2
list
list <-c(1:10)
list
?read.csv
coil_data <- read.csv(file='Suspension_Coil.csv')
library(dplyr)
mechaData <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(mechaData)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData))
setwd("C:/Users/TTHammond/Desktop/modules/module15/MechaCar_Statistical_Analysis")
library(dplyr)
mechaData <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(mechaData)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData))
coil_data <- read.csv(file='Suspension_Coil.csv')
head(coil_data)
coilSummary <- demo_table2 %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI), sd(PSI) .groups = 'keep')
coilSummary <- demo_table2 %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI), SD = sd(PSI) .groups = 'keep')
coilSummary <- demo_table2 %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI), SD = sd(PSI), .groups = 'keep')
coilSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=variance(PSI), SD = sd(PSI), .groups = 'keep')
?var()
coilSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(coilSummary)
head(lotSummary)
lotSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(lotSummary)
lotSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summary(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(lotSummary)
lotSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(lotSummary)
View(coil_data)
View(lotSummary)
total_summary <- coil_data %>% summary(PSI)
total_summary <- coil_data %>% summarize(PSI)
head(total_summary)
total_summary <- coil_data %>% summary(PSI)
head(total_summary)
total_summary <- coil_data %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(total_summary)
View(mechaData)
View(total_summary)
View(coilSummary)
View(lotSummary)
View(total_summary)
library(dplyr)
mechaData <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(mechaData)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData))
?summary()
?t.test()
sampleTablePSI = coil_data$PSI
head(sampeTablePSI)
library(dplyr)
# deliverable 1
mechaData <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(mechaData)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData))
# deliverable 2
coil_data <- read.csv(file='Suspension_Coil.csv')
head(coil_data)
total_summary <- coil_data %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(total_summary)
lotSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(lotSummary)
#deliverable 3
sampleTablePSI = coil_data$PSI
head(sampeTablePSI)
head(sampleTablePSI)
View(coil_data)
t.test(mean(sampleTablePSI),mean(coil_data$PSI))
t.test(sampleTablePSI,coil_data$PSI)
View(coil_data)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Maufacturing_lot = Lot1)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_lot = Lot1)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot =
= Lot1)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot == Lot1)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot==Lot1)
library(jsonlite)
library(tidyverse)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price>10000 & drive =='4wd' & 'clean' %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
demo_table[sample(1:nrow(demo_table), 3),]
demo_table <- demo_table %>% mutate (Mileage_per_year = Total_Miles/(2020-Year), IsActive=TRUE)
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
# line plot
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks=c(15:30))
# scatter plot
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
# scatter plot with formatting
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# scatter plot with multiple aes() formatting
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
# scatter plot with multiple aes() formatting - ***point size in geom_point(aes())***
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point(aes(size=cty)) + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
# boxplot, babyyyyy
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
# set of boxplots to compare values
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# heatmap plot
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels\
#heatmap plot to viz vars with large # of values/categories
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
# boxplot combined with data points
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# using mapping argument --> similar to ggplot()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
#sdev of engine size for vehicle class
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
# ***FACETING***
# convert mpg data to long format
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
# boxplot w/ format
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
# facewrapping boxplot w/format from above
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
# END FACETING
#Qualitative Test for Normality
ggplot(mtcars,aes(x=wt)) + geom_density()
#Quanititative test for Normality
shapiro.test(mtcars$wt)
#visualize used car data -- using log10 to normalize
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# sample dataset and plot with geom_density
sample_table <- population_table %>% sample_n(100) #randomly sample 50 data points
plt2 <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt2 + geom_density() #visualize distribution using density plot
#t-test on miles driven
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# two-sample t-test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# pair t-test
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy, paired = T) # compares the mean difference
# aov() - analysis of variance
# first = clean up data; ensure that formatting is correct for all values; line up dtypes
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp~cyl,data=mtcars_filt))
# Correlation Analysis - comparing hp to 1/4 mile time
# plot first
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
# calculates correlation coefficient
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
# correlation using used car data
#import used cars data
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
#plot used cars data with miles_driven and selling_price
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
#Pearson correlation coefficient calculation
#correlation matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
#Linear Regression -- linear modeling using lm()
lm(qsec ~ hp, mtcars)
summary(lm(qsec~hp,mtcars))
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear mode
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#mutliple lm
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
#generate multi-lm summary
summary(lm(qsec~hp+disp+drat+wt+hp,data=mtcars))
# CHISQUARED MOTHERFUCKERS
# build contingency table
table(mpg$class,mpg$year)
tbl <- table(mpg$class, mpg$year)
chisq.test(tbl)
View(mpg_summary)
View(mpg_summary)
View(mpg_long)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot==Lot1)
# deliverable 2
coil_data <- read.csv(file='Suspension_Coil.csv')
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot==Lot1)
View(coil_data)
View(coilSummary)
# pair t-test
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
# pair t-test
mpg_data <- read.csv('mpg_modified.csv') #import dataset
setwd("C:/Users/TTHammond/Desktop/modules/module15/MechaCar_Statistical_Analysis")
library(dplyr)
# deliverable 1
mechaData <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(mechaData)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechaData))
# deliverable 2
coil_data <- read.csv(file='Suspension_Coil.csv')
head(coil_data)
total_summary <- coil_data %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(total_summary)
lotSummary <- coil_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD = sd(PSI), .groups = 'keep')
head(lotSummary)
#deliverable 3
# simple t.test()
sampleTablePSI = coil_data$PSI
head(sampleTablePSI)
t.test(sampleTablePSI,coil_data$PSI)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot==Lot1)
library(dplyr)
# t.test for all lots
sampleLot1 <- coil_data %>% filter(Manufacturing_Lot==Lot1)
# t.test for all lots
sampleLot1 <- coil_data %>% dyplr::filter(Manufacturing_Lot==Lot1)
library(dplyr)
